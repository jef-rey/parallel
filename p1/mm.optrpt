Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.0.166 Build 20191121

Compiler options: -o mmvec -Wall -Werror -std=c99 -march=core-avx2 -O2 -qopt-report=5 -qopt-report-phase=vec -D NOALIAS -D ALIGNED

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at mm.c(109,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mm.c(110,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mm.c(110,5)
      remark #15389: vectorization support: reference C_mult[q][z] has unaligned access   [ mm.c(111,7) ]
      remark #15389: vectorization support: reference C_add[q][z] has unaligned access   [ mm.c(112,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.812
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 4.820 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mm.c(110,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference C_mult[q][z] has unaligned access   [ mm.c(111,7) ]
      remark #15389: vectorization support: reference C_add[q][z] has unaligned access   [ mm.c(112,7) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.600
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 1.000 
      remark #15478: estimated potential speedup: 4.820 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mm.c(110,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mm.c(121,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mm.c(122,7)
      remark #15527: loop was not vectorized: function call to rand(void) cannot be vectorized   [ mm.c(60,25) ]
   LOOP END
LOOP END

LOOP BEGIN at mm.c(129,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mm.c(130,7)
      remark #15527: loop was not vectorized: function call to rand(void) cannot be vectorized   [ mm.c(60,25) ]
   LOOP END
LOOP END

LOOP BEGIN at mm.c(139,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mm.c(140,7)
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at mm.c(149,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mm.c(150,7)
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

LOOP BEGIN at mm.c(21,3) inlined into mm.c(164,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mm.c(23,5) inlined into mm.c(164,3)
      remark #15388: vectorization support: reference C_add[i][j] has aligned access   [ mm.c(24,7) ]
      remark #15388: vectorization support: reference A[i][j] has aligned access   [ mm.c(24,18) ]
      remark #15388: vectorization support: reference B[i][j] has aligned access   [ mm.c(24,28) ]
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 7.140 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mm.c(23,5) inlined into mm.c(164,3)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference C_add[i][j] has aligned access   [ mm.c(24,7) ]
      remark #15388: vectorization support: reference A[i][j] has aligned access   [ mm.c(24,18) ]
      remark #15388: vectorization support: reference B[i][j] has aligned access   [ mm.c(24,28) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 2.000
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 7.140 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mm.c(23,5) inlined into mm.c(164,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mm.c(42,3) inlined into mm.c(169,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mm.c(44,5) inlined into mm.c(169,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mm.c(45,7) inlined into mm.c(169,3)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at mm.c(45,7) inlined into mm.c(169,3)
         remark #15389: vectorization support: reference C_mult[i][j] has unaligned access   [ mm.c(46,9) ]
         remark #15389: vectorization support: reference C_mult[i][j] has unaligned access   [ mm.c(46,19) ]
         remark #15389: vectorization support: reference B[k][j] has unaligned access   [ mm.c(46,39) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 1.000 
         remark #15478: estimated potential speedup: 6.030 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at mm.c(45,7) inlined into mm.c(169,3)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mm.c(177,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mm.c(178,7)
      remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ mm.c(179,9) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END

LOOP BEGIN at mm.c(186,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mm.c(187,7)
      remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ mm.c(188,9) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: add(int, float (*)[*], float (*)[*], float (*)[*])

    Report from: Vector optimizations [vec]


LOOP BEGIN at mm.c(21,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mm.c(23,5)
      remark #15388: vectorization support: reference C[i][j] has aligned access   [ mm.c(24,7) ]
      remark #15388: vectorization support: reference A[i][j] has aligned access   [ mm.c(24,18) ]
      remark #15388: vectorization support: reference B[i][j] has aligned access   [ mm.c(24,28) ]
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 7.140 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mm.c(23,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference C[i][j] has aligned access   [ mm.c(24,7) ]
      remark #15388: vectorization support: reference A[i][j] has aligned access   [ mm.c(24,18) ]
      remark #15388: vectorization support: reference B[i][j] has aligned access   [ mm.c(24,28) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 2.000
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 0.620 
      remark #15478: estimated potential speedup: 7.140 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mm.c(23,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: multiply(int, float (*)[*], float (*)[*], float (*)[*])

    Report from: Vector optimizations [vec]


LOOP BEGIN at mm.c(42,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mm.c(44,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mm.c(45,7)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at mm.c(45,7)
         remark #15389: vectorization support: reference C[i][j] has unaligned access   [ mm.c(46,9) ]
         remark #15389: vectorization support: reference C[i][j] has unaligned access   [ mm.c(46,19) ]
         remark #15389: vectorization support: reference B[k][j] has unaligned access   [ mm.c(46,39) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 8 
         remark #15477: vector cost: 1.000 
         remark #15478: estimated potential speedup: 6.030 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at mm.c(45,7)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================
